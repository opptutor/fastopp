<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://oppkey.github.io/fastopp/feed.xml" rel="self" type="application/atom+xml" /><link href="https://oppkey.github.io/fastopp/" rel="alternate" type="text/html" /><updated>2025-10-08T18:32:13+00:00</updated><id>https://oppkey.github.io/fastopp/feed.xml</id><title type="html">FastOpp Blog</title><subtitle>Easier AI Web Apps for Students - FastAPI starter package for students prototyping AI web applications</subtitle><author><name>Oppkey</name></author><entry><title type="html">File Upload Demo Now Runs on S3 in Addition to Local Files</title><link href="https://oppkey.github.io/fastopp/2025/10/08/modularize-storage-system/" rel="alternate" type="text/html" title="File Upload Demo Now Runs on S3 in Addition to Local Files" /><published>2025-10-08T00:00:00+00:00</published><updated>2025-10-08T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/10/08/modularize-storage-system</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/10/08/modularize-storage-system/"><![CDATA[<h2 id="-overview">üéØ Overview</h2>

<p>FastOpp demo system moved to a modular storage system that abstracts file storage operations, supporting both local filesystem and S3-compatible object storage. The system is designed to work seamlessly in development (filesystem) and production (S3) environments, with automatic backend selection based on environment variables.</p>

<h2 id="-key-features">üöÄ Key Features</h2>

<h3 id="modular-storage-architecture"><strong>Modular Storage Architecture</strong></h3>
<ul>
  <li><strong>Abstract Interface</strong>: Clean abstraction for storage operations</li>
  <li><strong>Multiple Backends</strong>: Filesystem and S3-compatible storage</li>
  <li><strong>Environment-Based Configuration</strong>: Automatic backend selection</li>
  <li><strong>Production-Ready</strong>: Supports LeapCell Object Storage and AWS S3</li>
</ul>

<h3 id="demo-assets-integration"><strong>Demo Assets Integration</strong></h3>
<ul>
  <li><strong>Save/Restore Support</strong>: Storage system included in demo workflow</li>
  <li><strong>Destroy/Restore Cycle</strong>: Storage system can be removed and restored</li>
  <li><strong>Change Detection</strong>: Storage system changes tracked in diff operations</li>
</ul>

<h2 id="-files-added">üìÅ Files Added</h2>

<h3 id="storage-system-core"><strong>Storage System Core</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">services/storage/__init__.py</code> - Module exports and imports</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/base.py</code> - Abstract storage interface</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/filesystem.py</code> - Filesystem storage implementation</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/s3.py</code> - S3-compatible storage implementation</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/factory.py</code> - Storage factory for backend selection</li>
  <li><code class="language-plaintext highlighter-rouge">services/storage/README.md</code> - Comprehensive documentation</li>
</ul>

<h2 id="-files-modified">üîÑ Files Modified</h2>

<h3 id="core-application-files"><strong>Core Application Files</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">oppdemo.py</code> - Updated to use modular storage system
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ensure_upload_dirs()</code> now uses storage abstraction</li>
      <li>Added storage system to save/restore/destroy workflow</li>
      <li>Added storage system to diff comparison</li>
    </ul>
  </li>
</ul>

<h3 id="scripts-updated"><strong>Scripts Updated</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">scripts/download_sample_photos.py</code> - Updated to use storage abstraction</li>
  <li><code class="language-plaintext highlighter-rouge">demo_scripts/download_sample_photos.py</code> - Updated to use storage abstraction</li>
</ul>

<h3 id="configuration"><strong>Configuration</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">example.env</code> - Added comprehensive storage configuration options
    <ul>
      <li>Storage type selection (<code class="language-plaintext highlighter-rouge">STORAGE_TYPE</code>)</li>
      <li>Filesystem storage options (<code class="language-plaintext highlighter-rouge">UPLOAD_DIR</code>)</li>
      <li>S3 storage options (access keys, bucket, endpoint, CDN)</li>
    </ul>
  </li>
</ul>

<h2 id="Ô∏è-files-removed">üóëÔ∏è Files Removed</h2>

<h3 id="cleanup"><strong>Cleanup</strong></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">storage/</code> (project root) - Redundant folder removed
    <ul>
      <li>Contained only <code class="language-plaintext highlighter-rouge">base.py</code> which was identical to <code class="language-plaintext highlighter-rouge">services/storage/base.py</code></li>
      <li>No code references to old location</li>
    </ul>
  </li>
</ul>

<h2 id="-technical-implementation">üîß Technical Implementation</h2>

<h3 id="storage-interface"><strong>Storage Interface</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">StorageInterface</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">ensure_directories</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">paths</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span>
    <span class="k">def</span> <span class="nf">save_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">content</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">content_type</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">get_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span>
    <span class="k">def</span> <span class="nf">file_exists</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span>
    <span class="k">def</span> <span class="nf">delete_file</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span>
    <span class="k">def</span> <span class="nf">list_files</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">prefix</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="k">def</span> <span class="nf">get_file_url</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span>
</code></pre></div></div>

<h3 id="backend-implementations"><strong>Backend Implementations</strong></h3>

<h4 id="filesystemstorage"><strong>FilesystemStorage</strong></h4>
<ul>
  <li>Local file storage for development</li>
  <li>Automatic directory creation</li>
  <li>Static file serving via FastAPI mounts</li>
  <li>URL generation for static file access</li>
</ul>

<h4 id="s3storage"><strong>S3Storage</strong></h4>
<ul>
  <li>S3-compatible object storage for production</li>
  <li>Supports AWS S3, LeapCell Object Storage, and other S3-compatible services</li>
  <li>CDN URL support for public file access</li>
  <li>Automatic content type detection</li>
</ul>

<h3 id="factory-pattern"><strong>Factory Pattern</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_storage</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">StorageInterface</span><span class="p">:</span>
    <span class="n">storage_type</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"STORAGE_TYPE"</span><span class="p">,</span> <span class="s">"filesystem"</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">storage_type</span> <span class="o">==</span> <span class="s">"s3"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">_create_s3_storage</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">_create_filesystem_storage</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="-environment-configuration">üåç Environment Configuration</h2>

<h3 id="development-default"><strong>Development (Default)</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># No configuration needed - uses filesystem storage</span>
<span class="nv">STORAGE_TYPE</span><span class="o">=</span>filesystem
<span class="nv">UPLOAD_DIR</span><span class="o">=</span>static/uploads
</code></pre></div></div>

<h3 id="production-with-leapcell"><strong>Production with LeapCell</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">STORAGE_TYPE</span><span class="o">=</span>s3
<span class="nv">S3_ACCESS_KEY</span><span class="o">=</span>your_leapcell_access_key
<span class="nv">S3_SECRET_KEY</span><span class="o">=</span>your_leapcell_secret_key
<span class="nv">S3_BUCKET</span><span class="o">=</span>your_bucket_name
<span class="nv">S3_ENDPOINT_URL</span><span class="o">=</span>https://objstorage.leapcell.io
<span class="nv">S3_CDN_URL</span><span class="o">=</span>https://your-account.leapcellobj.com/your-bucket
</code></pre></div></div>

<h3 id="production-with-aws-s3"><strong>Production with AWS S3</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">STORAGE_TYPE</span><span class="o">=</span>s3
<span class="nv">S3_ACCESS_KEY</span><span class="o">=</span>your_aws_access_key
<span class="nv">S3_SECRET_KEY</span><span class="o">=</span>your_aws_secret_key
<span class="nv">S3_BUCKET</span><span class="o">=</span>your_bucket_name
<span class="nv">S3_REGION</span><span class="o">=</span>us-west-2
</code></pre></div></div>

<h2 id="-migration-guide">üîÑ Migration Guide</h2>

<h3 id="from-hardcoded-paths"><strong>From Hardcoded Paths</strong></h3>
<p><strong>Before:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">upload_dir</span> <span class="o">=</span> <span class="s">"static/uploads"</span>
<span class="n">photo_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">upload_dir</span><span class="p">)</span> <span class="o">/</span> <span class="s">"photos"</span> <span class="o">/</span> <span class="n">filename</span>
<span class="n">photo_path</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">photo_path</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>After:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>
<span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>
<span class="n">storage</span><span class="p">.</span><span class="n">ensure_directories</span><span class="p">(</span><span class="s">"photos"</span><span class="p">)</span>
<span class="n">photo_url</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">save_file</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="sa">f</span><span class="s">"photos/</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="s">"image/jpeg"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="from-environment-variables"><strong>From Environment Variables</strong></h3>
<p><strong>Before:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">upload_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"UPLOAD_DIR"</span><span class="p">,</span> <span class="s">"static/uploads"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>After:</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>
<span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>  <span class="c1"># Automatically configured based on environment
</span></code></pre></div></div>

<h2 id="-testing">üß™ Testing</h2>

<h3 id="storage-system-tests"><strong>Storage System Tests</strong></h3>
<ul>
  <li>‚úÖ Filesystem storage functionality</li>
  <li>‚úÖ S3 storage configuration (without actual S3 access)</li>
  <li>‚úÖ Environment detection and backend selection</li>
  <li>‚úÖ Import path validation</li>
  <li>‚úÖ Demo assets integration</li>
</ul>

<h3 id="demo-workflow-tests"><strong>Demo Workflow Tests</strong></h3>
<ul>
  <li>‚úÖ Save functionality includes storage system</li>
  <li>‚úÖ Restore functionality restores storage system</li>
  <li>‚úÖ Destroy functionality removes storage system</li>
  <li>‚úÖ Diff functionality compares storage system</li>
  <li>‚úÖ No differences found after save/restore cycle</li>
</ul>

<h2 id="-documentation">üìö Documentation</h2>

<h3 id="comprehensive-readme"><strong>Comprehensive README</strong></h3>
<ul>
  <li><strong>Quick Start Guide</strong>: Development and production setup</li>
  <li><strong>Environment Variables</strong>: Complete configuration reference</li>
  <li><strong>Usage Examples</strong>: Basic and advanced usage patterns</li>
  <li><strong>Migration Guide</strong>: Step-by-step migration instructions</li>
  <li><strong>Configuration Examples</strong>: Development, LeapCell, and AWS S3 setups</li>
  <li><strong>Error Handling</strong>: Consistent error handling across backends</li>
</ul>

<h3 id="code-documentation"><strong>Code Documentation</strong></h3>
<ul>
  <li><strong>Type Hints</strong>: Full type annotations for all methods</li>
  <li><strong>Docstrings</strong>: Comprehensive documentation for all classes and methods</li>
  <li><strong>Examples</strong>: Usage examples in docstrings</li>
  <li><strong>Error Handling</strong>: Clear error messages and exception handling</li>
</ul>

<h2 id="-benefits">üéØ Benefits</h2>

<h3 id="for-development"><strong>For Development</strong></h3>
<ul>
  <li><strong>Zero Configuration</strong>: Works out of the box with filesystem storage</li>
  <li><strong>Easy Testing</strong>: Simple to mock and test</li>
  <li><strong>Clear Separation</strong>: Storage logic separated from business logic</li>
  <li><strong>Type Safety</strong>: Full type hints and validation</li>
</ul>

<h3 id="for-production"><strong>For Production</strong></h3>
<ul>
  <li><strong>Cloud-Ready</strong>: Seamless S3 integration for cloud deployments</li>
  <li><strong>CDN Support</strong>: Built-in CDN URL generation</li>
  <li><strong>Scalable</strong>: Object storage scales with application needs</li>
  <li><strong>Persistent</strong>: Files persist across deployments</li>
</ul>

<h3 id="for-deployment"><strong>For Deployment</strong></h3>
<ul>
  <li><strong>Environment-Based</strong>: Automatic backend selection</li>
  <li><strong>LeapCell Compatible</strong>: Works with LeapCell Object Storage</li>
  <li><strong>AWS Compatible</strong>: Works with AWS S3</li>
  <li><strong>Flexible</strong>: Easy to add new storage backends</li>
</ul>

<h2 id="-demo-assets-integration">üîÑ Demo Assets Integration</h2>

<h3 id="save-workflow"><strong>Save Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py save
<span class="c"># ‚Üí Saves services/storage/ to demo_assets/services/storage/</span>
</code></pre></div></div>

<h3 id="restore-workflow"><strong>Restore Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py restore
<span class="c"># ‚Üí Restores services/storage/ from demo_assets/services/storage/</span>
</code></pre></div></div>

<h3 id="destroy-workflow"><strong>Destroy Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py destroy
<span class="c"># ‚Üí Removes services/ directory (including storage/)</span>
</code></pre></div></div>

<h3 id="diff-workflow"><strong>Diff Workflow</strong></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py diff
<span class="c"># ‚Üí Shows differences in services/storage/ module</span>
</code></pre></div></div>

<h2 id="-usage-examples">üöÄ Usage Examples</h2>

<h3 id="basic-usage"><strong>Basic Usage</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>

<span class="c1"># Get configured storage instance
</span><span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>

<span class="c1"># Ensure directories exist
</span><span class="n">storage</span><span class="p">.</span><span class="n">ensure_directories</span><span class="p">(</span><span class="s">"photos"</span><span class="p">,</span> <span class="s">"sample_photos"</span><span class="p">)</span>

<span class="c1"># Save a file
</span><span class="n">photo_url</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">save_file</span><span class="p">(</span>
    <span class="n">content</span><span class="o">=</span><span class="n">image_bytes</span><span class="p">,</span>
    <span class="n">path</span><span class="o">=</span><span class="s">"photos/avatar.jpg"</span><span class="p">,</span>
    <span class="n">content_type</span><span class="o">=</span><span class="s">"image/jpeg"</span>
<span class="p">)</span>

<span class="c1"># Check if file exists
</span><span class="k">if</span> <span class="n">storage</span><span class="p">.</span><span class="n">file_exists</span><span class="p">(</span><span class="s">"photos/avatar.jpg"</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"File exists!"</span><span class="p">)</span>

<span class="c1"># Get file content
</span><span class="n">image_data</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">get_file</span><span class="p">(</span><span class="s">"photos/avatar.jpg"</span><span class="p">)</span>

<span class="c1"># Get public URL
</span><span class="n">public_url</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">get_file_url</span><span class="p">(</span><span class="s">"photos/avatar.jpg"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="advanced-usage"><strong>Advanced Usage</strong></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">services.storage</span> <span class="kn">import</span> <span class="n">get_storage</span>

<span class="n">storage</span> <span class="o">=</span> <span class="n">get_storage</span><span class="p">()</span>

<span class="c1"># List files with prefix
</span><span class="n">photos</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">list_files</span><span class="p">(</span><span class="s">"photos/"</span><span class="p">)</span>

<span class="c1"># Delete a file
</span><span class="n">success</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">delete_file</span><span class="p">(</span><span class="s">"photos/old_avatar.jpg"</span><span class="p">)</span>

<span class="c1"># Check storage type
</span><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">storage</span><span class="p">,</span> <span class="n">FilesystemStorage</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Using local filesystem"</span><span class="p">)</span>
<span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">storage</span><span class="p">,</span> <span class="n">S3Storage</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Using S3 object storage"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="-quality-assurance">‚úÖ Quality Assurance</h2>

<h3 id="code-quality"><strong>Code Quality</strong></h3>
<ul>
  <li><strong>Linting</strong>: All code passes linting checks</li>
  <li><strong>Type Safety</strong>: Full type hints throughout</li>
  <li><strong>Error Handling</strong>: Comprehensive error handling</li>
  <li><strong>Documentation</strong>: Complete docstrings and comments</li>
</ul>

<h3 id="testing"><strong>Testing</strong></h3>
<ul>
  <li><strong>Unit Tests</strong>: Storage system functionality tested</li>
  <li><strong>Integration Tests</strong>: Demo workflow integration tested</li>
  <li><strong>Environment Tests</strong>: Multiple environment configurations tested</li>
  <li><strong>Error Tests</strong>: Error conditions and edge cases tested</li>
</ul>

<h3 id="documentation"><strong>Documentation</strong></h3>
<ul>
  <li><strong>README</strong>: Comprehensive documentation with examples</li>
  <li><strong>Code Comments</strong>: Clear comments explaining complex logic</li>
  <li><strong>Type Hints</strong>: Full type annotations for IDE support</li>
  <li><strong>Examples</strong>: Practical usage examples throughout</li>
</ul>

<h2 id="-summary">üéâ Summary</h2>

<ol>
  <li><strong>Clean Architecture</strong>: Abstract interface with concrete implementations</li>
  <li><strong>Environment Flexibility</strong>: Automatic backend selection based on configuration</li>
  <li><strong>Production Ready</strong>: Full S3 support for cloud deployments</li>
  <li><strong>Development Friendly</strong>: Zero-configuration filesystem storage</li>
  <li><strong>Demo Integration</strong>: Seamless integration with demo assets workflow</li>
  <li><strong>Comprehensive Documentation</strong>: Complete usage and configuration guide</li>
</ol>

<p>The storage system is now a first-class citizen in the application, providing a clean abstraction for file operations while maintaining backward compatibility and adding powerful new capabilities for production deployments.</p>]]></content><author><name>Craig Oda</name></author><summary type="html"><![CDATA[Moved image upload storage from only files to include S3]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Architectural Consistency When Working with a PostgreSQL Async Database</title><link href="https://oppkey.github.io/fastopp/2025/10/07/postgresql-async/" rel="alternate" type="text/html" title="Architectural Consistency When Working with a PostgreSQL Async Database" /><published>2025-10-07T00:00:00+00:00</published><updated>2025-10-07T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/10/07/postgresql-async</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/10/07/postgresql-async/"><![CDATA[<h2 id="postgresql-failing-with-async-in-production-although-sqlite-works-on-my-mac">PostgreSQL Failing with Async in Production Although SQLite Works on my Mac</h2>

<p>Last week, I was working on our FastOpp project and ran into a classic developer problem: ‚ÄúIt works on my machine, but not in production.‚Äù Specifically, our FastAPI application worked perfectly with SQLite during development, but when I tried to switch to PostgreSQL in production on Leapcell using the Leapcell PostgreSQL service,
database access broke.</p>

<h2 id="converting-database-connection-to-sync-led-to-more-problems">Converting Database Connection to Sync Led to More Problems</h2>

<p>My first instinct was the same as many developers: find a workaround. I discovered that our
migration tool (Alembic) was trying to use synchronous database operations while our
FastAPI app was using asynchronous ones.</p>

<p>The ‚Äúsolution‚Äù I found online was to convert the database URL from async to sync during migrations:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The "quick fix" approach - BEFORE
</span><span class="k">def</span> <span class="nf">run_migrations_online</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">database_url</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"DATABASE_URL"</span><span class="p">,</span> <span class="n">config</span><span class="p">.</span><span class="n">get_main_option</span><span class="p">(</span><span class="s">"sqlalchemy.url"</span><span class="p">))</span>
    
    <span class="c1"># Convert async URLs to regular URLs for migrations
</span>    <span class="k">if</span> <span class="n">database_url</span> <span class="ow">and</span> <span class="s">"aiosqlite"</span> <span class="ow">in</span> <span class="n">database_url</span><span class="p">:</span>
        <span class="n">database_url</span> <span class="o">=</span> <span class="n">database_url</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"sqlite+aiosqlite://"</span><span class="p">,</span> <span class="s">"sqlite://"</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">database_url</span> <span class="ow">and</span> <span class="s">"asyncpg"</span> <span class="ow">in</span> <span class="n">database_url</span><span class="p">:</span>
        <span class="n">database_url</span> <span class="o">=</span> <span class="n">database_url</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"postgresql+asyncpg://"</span><span class="p">,</span> <span class="s">"postgresql://"</span><span class="p">)</span>
    
    <span class="n">connectable</span> <span class="o">=</span> <span class="n">engine_from_config</span><span class="p">(...)</span>  <span class="c1"># SYNC engine
</span>    <span class="k">with</span> <span class="n">connectable</span><span class="p">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">connection</span><span class="p">:</span>  <span class="c1"># SYNC connection
</span>        <span class="n">context</span><span class="p">.</span><span class="n">configure</span><span class="p">(</span><span class="n">connection</span><span class="o">=</span><span class="n">connection</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div></div>

<p>I committed the solution after only testing it on SQLite locally and unfortunately forgot
to test it on PostgreSQL.  Several months passed and my laziness came back to bite
me and cost me many hours. As I am new to Alembic, I didn‚Äôt think about
async Alembic patterns. The logic of using synchronous calls for migrations seemed fine
to me as migrations <em>felt</em> synchronous.  I didn‚Äôt think about this mismatch in architectures
too deeply, shrugging it off as ‚Äúthe way things are.‚Äù</p>

<h2 id="the-real-problem-architectural-mismatch">The Real Problem: Architectural Mismatch</h2>

<p>Here‚Äôs what I learned: when you build an async application, try to keep as much of your code
as possible async. Although it is possible to ‚Äúconvert‚Äù async to sync in the middle of your stack,
it may cause problems in the future when you have to maintain your own code.</p>

<p>The issue wasn‚Äôt with the database or the migration tool. The issue was that I was trying to mix two different paradigms:</p>

<ul>
  <li><strong>My FastAPI app</strong>: Async throughout (using <code class="language-plaintext highlighter-rouge">asyncpg</code> for PostgreSQL)</li>
  <li><strong>My migrations</strong>: Sync operations (using sync database drivers)</li>
</ul>

<h2 id="the-right-solution-go-all-in-on-async">The Right Solution: Go All-In on Async</h2>

<p>Instead of trying to convert between async and sync, I updated our migration system to be async from the ground up. Here‚Äôs the transformation:</p>

<h2 id="the-solution-pure-async-approach">The Solution: Pure Async Approach</h2>

<p>The key was updating <code class="language-plaintext highlighter-rouge">alembic/env.py</code> to use async patterns throughout:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># The RIGHT approach - AFTER
</span><span class="kn">import</span> <span class="nn">asyncio</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.ext.asyncio</span> <span class="kn">import</span> <span class="n">async_engine_from_config</span>
<span class="kn">from</span> <span class="nn">sqlalchemy.engine</span> <span class="kn">import</span> <span class="n">Connection</span>

<span class="k">def</span> <span class="nf">do_run_migrations</span><span class="p">(</span><span class="n">connection</span><span class="p">:</span> <span class="n">Connection</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">context</span><span class="p">.</span><span class="n">configure</span><span class="p">(</span><span class="n">connection</span><span class="o">=</span><span class="n">connection</span><span class="p">,</span> <span class="n">target_metadata</span><span class="o">=</span><span class="n">target_metadata</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">context</span><span class="p">.</span><span class="n">begin_transaction</span><span class="p">():</span>
        <span class="n">context</span><span class="p">.</span><span class="n">run_migrations</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_async_migrations</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">connectable</span> <span class="o">=</span> <span class="n">async_engine_from_config</span><span class="p">(...)</span>  <span class="c1"># ASYNC engine
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">connectable</span><span class="p">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">connection</span><span class="p">:</span>  <span class="c1"># ASYNC connection
</span>        <span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">run_sync</span><span class="p">(</span><span class="n">do_run_migrations</span><span class="p">)</span>  <span class="c1"># Magic happens here!
</span>    <span class="k">await</span> <span class="n">connectable</span><span class="p">.</span><span class="n">dispose</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">run_migrations_online</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">run_async_migrations</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="technical-implementation-details">Technical Implementation Details</h3>

<ul>
  <li><strong>Added async imports</strong>: <code class="language-plaintext highlighter-rouge">asyncio</code>, <code class="language-plaintext highlighter-rouge">Connection</code>, <code class="language-plaintext highlighter-rouge">async_engine_from_config</code></li>
  <li><strong>Replaced sync patterns</strong> with async alembic template approach</li>
  <li><strong>Added <code class="language-plaintext highlighter-rouge">do_run_migrations()</code></strong> function for connection handling</li>
  <li><strong>Added <code class="language-plaintext highlighter-rouge">run_async_migrations()</code></strong> function for async engine management</li>
  <li><strong>Updated <code class="language-plaintext highlighter-rouge">run_migrations_online()</code></strong> to use <code class="language-plaintext highlighter-rouge">asyncio.run()</code></li>
</ul>

<p>The key insight was this line:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="n">connection</span><span class="p">.</span><span class="n">run_sync</span><span class="p">(</span><span class="n">do_run_migrations</span><span class="p">)</span>
</code></pre></div></div>

<p>This allows you to run synchronous migration code within an async database connection.</p>

<h2 id="the-results-what-actually-happened">The Results: What Actually Happened</h2>

<p>After implementing the async approach, here‚Äôs what we achieved:</p>

<h3 id="single-driver-architecture"><strong>Single Driver Architecture</strong></h3>

<ul>
  <li><strong>Before</strong>: Needed both <code class="language-plaintext highlighter-rouge">asyncpg</code> (app) + <code class="language-plaintext highlighter-rouge">psycopg2</code> (migrations)</li>
  <li><strong>After</strong>: Only <code class="language-plaintext highlighter-rouge">asyncpg</code> for everything - no driver conflicts</li>
</ul>

<h3 id="consistent-database-urls"><strong>Consistent Database URLs</strong></h3>

<ul>
  <li><strong>Before</strong>: App used <code class="language-plaintext highlighter-rouge">postgresql+asyncpg://</code> but migrations converted to <code class="language-plaintext highlighter-rouge">postgresql://</code></li>
  <li><strong>After</strong>: Both use <code class="language-plaintext highlighter-rouge">postgresql+asyncpg://</code> - same driver throughout</li>
</ul>

<h3 id="works-with-both-databases"><strong>Works with Both Databases</strong></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># SQLite (development)</span>
<span class="nb">export </span><span class="nv">DATABASE_URL</span><span class="o">=</span><span class="s2">"sqlite+aiosqlite:///./test.db"</span>
uv run python oppman.py migrate upgrade  <span class="c"># ‚úÖ Works</span>
uv run python oppman.py runserver  <span class="c"># ‚úÖ Works</span>

<span class="c"># PostgreSQL (production)  </span>
<span class="nb">export </span><span class="nv">DATABASE_URL</span><span class="o">=</span><span class="s2">"postgresql+asyncpg://user@localhost:5432/fastopp"</span>
uv run python oppman.py migrate upgrade  <span class="c"># ‚úÖ Works</span>
uv run python oppman.py runserver  <span class="c"># ‚úÖ Works</span>
</code></pre></div></div>

<h3 id="database-verification-results"><strong>Database Verification Results</strong></h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># PostgreSQL tables created successfully</span>
psql <span class="nt">-d</span> fastopp_test <span class="nt">-c</span> <span class="s2">"</span><span class="se">\d</span><span class="s2">t"</span>
<span class="c"># Result: users, products, webinar_registrants, audit_logs, alembic_version</span>

<span class="c"># Health check verification</span>
curl <span class="nt">-s</span> http://localhost:8000/health
<span class="c"># Result: {"status":"healthy","message":"FastOpp Demo app is running"}</span>
</code></pre></div></div>

<h2 id="benefits-of-the-async-approach">Benefits of the Async Approach</h2>

<h3 id="performance-benefits">Performance Benefits</h3>

<ul>
  <li><strong>Async operations</strong> throughout the application</li>
  <li><strong>No sync/async context switching</strong> overhead</li>
  <li><strong>Better concurrency</strong> for database operations</li>
</ul>

<h3 id="developer-experience">Developer Experience</h3>

<ul>
  <li><strong>Single driver approach</strong> - no psycopg2 conflicts</li>
  <li><strong>Environment-based switching</strong> between SQLite and PostgreSQL</li>
  <li><strong>Modern async patterns</strong> following SQLAlchemy 2.0 best practices</li>
</ul>

<h3 id="production-ready">Production Ready</h3>

<ul>
  <li><strong>PostgreSQL support</strong> for production deployments</li>
  <li><strong>Async alembic migrations</strong> work with both databases</li>
  <li><strong>No breaking changes</strong> to existing SQLite development workflow</li>
</ul>

<h2 id="why-this-matters-for-students">Why This Matters for Students</h2>

<p>If you‚Äôre learning web development, here‚Äôs the takeaway: <strong>consistency is more important than clever workarounds</strong>.</p>

<p>When you‚Äôre building modern web applications:</p>

<ul>
  <li>Choose your architecture (sync or async) and stick with it</li>
  <li>Don‚Äôt try to mix paradigms just because it seems easier</li>
  <li>The ‚Äúquick fix‚Äù often becomes the ‚Äúlong-term problem‚Äù</li>
</ul>

<h2 id="async-database-access-may-not-be-justified">Async Database Access May Not Be Justified</h2>

<p>Standardizing on synchronous database access for everything is simpler and will
work for most apps.  Asynchronous operations are needed only for heavy
SQL joins where the response takes many seconds or minutes and need to be run
in real-time.  In most cases, people will run the operation in the background
with Celery.</p>

<p>However, even if I don‚Äôt see the need for asynchronous database connections,
other people might.  FastOpp is a learning tool and I want to provide
asynchronous connectivity to support the creativity of others.</p>

<h2 id="the-business-lesson">The Business Lesson</h2>

<p>As a manager, I‚Äôve seen this pattern play out in many projects. The ‚Äúquick fix‚Äù
that saves 30 minutes today often costs hours or days later. In this case, spending the extra time to properly implement async migrations saved us from a maintenance nightmare. The ‚Äúquick fix‚Äù
was also forgotten because there is no real-world impact in using synchronous migrations.</p>

<p>The modern approach - using async patterns throughout - is not just technically correct, it‚Äôs also more maintainable and scalable.</p>

<h2 id="whats-next">What‚Äôs Next</h2>

<p>Our FastOpp project now supports both SQLite (for development) and PostgreSQL (for production) with a single, consistent async architecture. No more driver conflicts, no more sync/async mixing, and no more ‚Äúit works on my machine‚Äù problems.</p>

<p>It appears that <a href="https://www.psycopg.org/psycopg3/">psycopg3</a> supports both async and sync. I don‚Äôt think it‚Äôs as popular
as asyncpg.  However, I hope to try it out next.</p>

<h2 id="migration-guide-for-existing-users">Migration Guide for Existing Users</h2>

<h3 id="no-action-required"><strong>No Action Required</strong></h3>

<ul>
  <li><strong>SQLite development</strong> continues to work exactly as before</li>
  <li><strong>Optional</strong>: Update <code class="language-plaintext highlighter-rouge">.env</code> to use <code class="language-plaintext highlighter-rouge">sqlite+aiosqlite://</code> for consistency</li>
  <li><strong>For PostgreSQL testing</strong>: Set <code class="language-plaintext highlighter-rouge">DATABASE_URL=postgresql+asyncpg://...</code></li>
</ul>

<h3 id="for-new-deployments"><strong>For New Deployments</strong></h3>

<ol>
  <li><strong>Development</strong>: Use <code class="language-plaintext highlighter-rouge">DATABASE_URL=sqlite+aiosqlite:///./test.db</code></li>
  <li><strong>Production</strong>: Use <code class="language-plaintext highlighter-rouge">DATABASE_URL=postgresql+asyncpg://user:pass@host:port/db</code></li>
  <li><strong>Run migrations</strong>: <code class="language-plaintext highlighter-rouge">uv run python oppman.py migrate upgrade</code></li>
</ol>

<h2 id="files-changed">Files Changed</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">alembic/env.py</code> - Updated to async patterns</li>
  <li><code class="language-plaintext highlighter-rouge">example.env</code> - Added PostgreSQL configuration examples</li>
  <li><code class="language-plaintext highlighter-rouge">docs/deployment/POSTGRESQL_SETUP.md</code> - Updated installation instructions</li>
  <li><code class="language-plaintext highlighter-rouge">docs/DATABASE.md</code> - Updated troubleshooting with async patterns</li>
</ul>

<h2 id="breaking-changes">Breaking Changes</h2>

<p><strong>None</strong> - This is a backward-compatible enhancement that adds PostgreSQL support while maintaining full SQLite compatibility.</p>

<h2 id="additional-information">Additional Information</h2>

<p><a href="https://github.com/Oppkey/fastopp/pull/140">Pull request with extensive description of changes</a>.</p>]]></content><author><name>Craig Oda</name></author><summary type="html"><![CDATA[How I learned that async databases need async migrations, and why the 'quick fix' approach doesn't scale]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/2025_10/run.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using Tavily to add internet search to chat</title><link href="https://oppkey.github.io/fastopp/2025/09/30/adding-internet-search-to-llm/" rel="alternate" type="text/html" title="Using Tavily to add internet search to chat" /><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/09/30/adding-internet-search-to-llm</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/09/30/adding-internet-search-to-llm/"><![CDATA[<h3 id="httpsgithubcomcodetricitychat-with-history"><a href="https://github.com/codetricity/chat-with-history">https://github.com/codetricity/chat-with-history</a></h3>]]></content><author><name>Shotoku</name></author><summary type="html"><![CDATA[This chat_with_history example has an a way to connect LLM to internet search]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/search-icon.png" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/search-icon.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">FastOpp Deployment to Leapcell - Free Hosting Tier</title><link href="https://oppkey.github.io/fastopp/2025/09/30/leapcell-deployment/" rel="alternate" type="text/html" title="FastOpp Deployment to Leapcell - Free Hosting Tier" /><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/09/30/leapcell-deployment</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/09/30/leapcell-deployment/"><![CDATA[<p>These tutorials will take you through free deployment on
Leapcell with both FastAPI and FastOpp.</p>

<p><a href="https://youtu.be/xhOALd640tA">FastAPI Deploy to Leapcell - free hosting tier</a></p>

<p><a href="https://youtu.be/GoKpQTHE-1A">Free  Deploy to Leapcell with FastAPI, PostgreSQL and Object Storage</a></p>]]></content><author><name>Oppkey Tutor</name></author><summary type="html"><![CDATA[Free deployment to Leapcell. No credit card required.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/leapcell_logo.png" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/leapcell_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Our Process for Testing and Contributing to FastOpp</title><link href="https://oppkey.github.io/fastopp/2025/09/30/testing-fastopp/" rel="alternate" type="text/html" title="Our Process for Testing and Contributing to FastOpp" /><published>2025-09-30T00:00:00+00:00</published><updated>2025-09-30T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/09/30/testing-fastopp</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/09/30/testing-fastopp/"><![CDATA[<p>Testing ‚Ä¶</p>

<p>Ipsum lorem‚Ä¶</p>]]></content><author><name>Ethan Luke Kim</name></author><summary type="html"><![CDATA[A quick guide and personal notes on testing the FastOpp framework, including the essential git commands for contributing.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/github-pull-request.webp" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/github-pull-request.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Welcome to FastOpp - Easier AI Web Apps for Students</title><link href="https://oppkey.github.io/fastopp/2025/09/29/welcome-to-fastopp/" rel="alternate" type="text/html" title="Welcome to FastOpp - Easier AI Web Apps for Students" /><published>2025-09-29T00:00:00+00:00</published><updated>2025-09-29T00:00:00+00:00</updated><id>https://oppkey.github.io/fastopp/2025/09/29/welcome-to-fastopp</id><content type="html" xml:base="https://oppkey.github.io/fastopp/2025/09/29/welcome-to-fastopp/"><![CDATA[<p>Welcome to the FastOpp blog. <strong>FastOpp</strong> is a FastAPI starter package designed specifically for students prototyping AI web applications.</p>

<h2 id="what-is-fastopp">What is FastOpp?</h2>

<p>FastOpp provides pre-built admin components that give FastAPI functionality comparable to Django for AI-first applications. It‚Äôs designed to bridge the gap between Django‚Äôs ease of use and FastAPI‚Äôs modern async capabilities.</p>

<h3 id="the-problem-were-solving">The Problem We‚Äôre Solving</h3>

<p>Django and Flask are not designed for optimized async LLM applications. While both can absolutely be used for complex AI applications, there are often rough patches during development of asynchronous AI applications that communicate with backend LLMs available at OpenAI, Anthropic, and OpenRouter.</p>

<p>FastAPI has advantages in future-proof architecture, but can have a steep learning curve for people, especially for developers familiar with Django. FastOpp bridges this gap by providing an opinionated framework for FastAPI with Django-inspired features.</p>

<h2 id="key-features">Key Features</h2>

<h3 id="Ô∏è-admin-panel">üõ°Ô∏è Admin Panel</h3>
<p>Django-style admin panel with role-based authentication, similar to Django admin but built for FastAPI.</p>

<h3 id="Ô∏è-sql-database">üóÑÔ∏è SQL Database</h3>
<p>SQL database with Django-inspired models and migrations using SQLModel and Alembic.</p>

<h3 id="-modern-ui">üé® Modern UI</h3>
<p>Tailwind CSS, DaisyUI, Alpine.js, and HTMX for beautiful, interactive interfaces.</p>

<h3 id="-api-endpoints">üîå API Endpoints</h3>
<p>Auto-generated API documentation and endpoints designed to connect with React and Flutter.</p>

<h3 id="-fast-development">‚ö° Fast Development</h3>
<p>Get started quickly with pre-built components and management tools like <code class="language-plaintext highlighter-rouge">oppman.py</code> and <code class="language-plaintext highlighter-rouge">oppdemo.py</code>.</p>

<h2 id="who-is-fastopp-for">Who is FastOpp For?</h2>

<p>FastOpp is opinionated and may not be for everyone. It‚Äôs intended for:</p>

<ul>
  <li><strong>University students</strong> looking to build resume projects</li>
  <li><strong>Hobbyists</strong> wanting to vibe code simple AI utilities</li>
  <li><strong>Small business entrepreneurs</strong> with great ideas but limited programming experience</li>
</ul>

<h3 id="important-note">Important Note</h3>
<p>FastOpp is <strong>not intended for production use or for experienced developers</strong>. It‚Äôs a learning tool designed to get you started quickly with AI applications.</p>

<h2 id="quick-start">Quick Start</h2>

<p>Getting started with FastOpp is simple:</p>

<ol>
  <li><strong>Create your repo from the template</strong>
    <ul>
      <li>Go to <a href="https://github.com/Oppkey/FastOpp">FastOpp on GitHub</a></li>
      <li>Click ‚ÄúUse this template‚Äù ‚Üí ‚ÄúCreate a new repository‚Äù</li>
      <li>Name it (e.g., <code class="language-plaintext highlighter-rouge">fastopp-&lt;yourproject&gt;</code>)</li>
    </ul>
  </li>
  <li><strong>Clone and setup</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/&lt;YOUR_USERNAME&gt;/fastopp-&lt;yourproject&gt;.git
<span class="nb">cd </span>fastopp-&lt;yourproject&gt;
uv <span class="nb">sync</span>
</code></pre></div>    </div>
  </li>
  <li><strong>One-command setup</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppdemo.py init
</code></pre></div>    </div>
  </li>
  <li><strong>Start developing</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv run python oppman.py runserver
</code></pre></div>    </div>
  </li>
</ol>

<p>Visit <code class="language-plaintext highlighter-rouge">http://localhost:8000/</code> to see your FastOpp application in action!</p>

<h2 id="whats-next">What‚Äôs Next?</h2>

<p>In upcoming posts, I‚Äôll cover:</p>

<ul>
  <li>Setting up your first AI chat application</li>
  <li>Customizing the admin panel</li>
  <li>Deploying to production</li>
  <li>Advanced FastAPI patterns with FastOpp</li>
</ul>

<h2 id="get-involved">Get Involved</h2>

<ul>
  <li><strong>GitHub</strong>: <a href="https://github.com/Oppkey/FastOpp">Oppkey/FastOpp</a></li>
  <li><strong>Issues</strong>: Report bugs or request features</li>
  <li><strong>Discussions</strong>: Ask questions and share your projects</li>
</ul>

<p>FastOpp is designed to be beautiful, cheap, easy, and opinionated. Whether you‚Äôre a student building your first AI app or a hobbyist exploring new possibilities, FastOpp provides the foundation you need to get started quickly.</p>

<p>Stay tuned for more tutorials, tips, and updates about FastOpp development!</p>

<hr />

<p><em>Have questions about FastOpp? Check out our <a href="https://github.com/Oppkey/FastOpp">GitHub repository</a> or start a discussion. We‚Äôd love to hear about your AI application ideas!</em></p>]]></content><author><name>Craig Oda</name></author><summary type="html"><![CDATA[Introducing FastOpp, a FastAPI starter package designed for students prototyping AI web applications. Get Django-like functionality with FastAPI's async capabilities.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://oppkey.github.io/fastopp/assets/images/workshop.webp" /><media:content medium="image" url="https://oppkey.github.io/fastopp/assets/images/workshop.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>